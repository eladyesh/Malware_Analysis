import threading
import requests
import sys
from queue import Queue
import sqlite3

print_lock = threading.Lock()
q = Queue()


# f = open("hashes.txt", "w+")


def get_hash(link):
    url_response = requests.get(link)
    url_contents = url_response.text
    return url_contents[198:]


def run():
    while True:
        # get the port
        i = q.get()
        page_num = (5 - len(str(i))) * "0" + str(i)
        hash = get_hash(f"https://virusshare.com/hashfiles/VirusShare_{page_num}.md5")

        try:
            for i in hash.split("\n"):
                con = sqlite3.connect('hashes.db')
                cur = con.cursor()
                cur.execute('INSERT INTO hashes(hash) VALUES (?)', (i,))
                con.commit()
                con.close()

            # lets workers say when a task is done
            q.task_done()
        except sqlite3.OperationalError:
            print("got here")
            pass



def main():
    # multithreading --> reducing execution time significantly
    for p in range(5):
        thread = threading.Thread(target=run)
        thread.daemon = True
        thread.start()

    # put all the ports in the queue
    for p in range(0, 1000):
        q.put(p)

    # block the main threads until the workers have processed everything that's in the queue
    q.join()


if __name__ == "__main__":
    con = sqlite3.connect('hashes.db')
    cur = con.cursor()
    cur.execute(f'''CREATE TABLE IF NOT EXISTS hashes(
                    hash TEXT INTEGER PRIMARY KEY
                    )
                ''')
    con.commit()
    con.close()
    main()
