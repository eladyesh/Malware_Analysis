#!/usr/bin/env python

"""
 This script is for identify packer/protector and compiler used in your target binary
 the first version have more than about 5000 signatures ... we will try to updates signatures monthly
 and for now it will use entry point scanning method ...
"""

# import python libraries
import os
import sys
import getopt
import Libs.pefile as pefile
import Libs.immlib
import Libs.peutils as peutils
import hashlib
import shutil
import urllib

DESC = "Immunity PyCommand PeDetect will help you to identify packer / protection used in target binary"
USAGE = "!plugin"

# global
downloaded = 0

# Using debugger functionality
imm = Libs.immlib.Debugger()


def urllib_hook(idx, slice, total):
    global downloaded

    downloaded += slice

    completed = int(float(downloaded) / float(total) * 100)

    if completed > 100:
        completed = 100

    imm.log("   [+] Downloading new signatures ... %d%%" % completed)


# Downloader function
def get_it(url, file_name):
    global downloaded

    downloaded = 0
    u = urllib.urlretrieve(url, reporthook=urllib_hook)
    # imm.log("")
    shutil.move(u[0], file_name)


# Calculate MD5Checksum for specific file
def md5checksum(fileName, excludeLine="", includeLine=""):
    m = hashlib.md5()
    try:
        fd = open(fileName, "rb")
    except IOError:
        imm.log("Unable to open the file in readmode:", fileName)
        return
    content = fd.readlines()
    fd.close()
    for eachLine in content:
        if excludeLine and eachLine.startswith(excludeLine):
            continue
        m.update(eachLine)
    m.update(includeLine)
    return m.hexdigest()


# Simple Usage Function
def usage(imm):
    imm.log("!plugin -u (for updating signature ... )")


# Auto-Update function
def update():
    # Using urlretrieve won't overwrite anything
    try:
        download = urllib.urlretrieve('http://abysssec.com/AbyssDB/Database.TXT')
    except Exception, problem:
        imm.log("Error : %s" % problem)

    # Computation MD5 checksum for both existing and our current database
    AbyssDB = md5checksum(download[0])
    ExistDB = md5checksum('Data/Database.TXT')

    imm.log(" [!] Checking for updates ...", focus=1, highlight=1)
    imm.log("")
    imm.log(" [*] Our  database checksum : %s " % AbyssDB)
    imm.log(" [*] Your database checksum : %s " % ExistDB)
    imm.log("")

    if AbyssDB != ExistDB:

        imm.log("[!] Some update founds updating ....")

        # Removing existing one for be sure ...
        if os.path.exists('Data/Database.TXT'):
            os.remove('Data/Database.TXT')

        # Download latest database
        try:
            get_it("http://abysssec.com/AbyssDB/Database.TXT", "Data/Database.txt")
        except Exception, mgs:
            return " [-] Problem in downloading new database ..." % mgs

        imm.log("   [+] Update Completed !")

    else:
        imm.log(" [!] You have our latest database ...")


def open_file():
    file = open("hello.txt", "w")
    file.write("hello")
    file.close()


# Main Function
def main(args):

    if args:
        if args[0].lower() == '-u':
            update()
        else:
            imm.log("[-] Bad argument use -u for update ...")
            return "[-] Bad argument use -u for update ..."
    else:
        try:

            f = open("Data/packers.txt", "w")

            # Getting loaded exe path
            path = imm.getModule(imm.getDebuggedName()).getPath()
        except Exception, msg:
            return "Error: %s" % msg

        # Debugged Name
        name = imm.getDebuggedName()

        # Loading loaded pe !
        pe = pefile.PE(path)

        # Loading signatures Database
        signatures = peutils.SignatureDatabase('Data/Database.txt')

        # Match the signature using scanning entry point only !
        matched = signatures.match(pe, ep_only=True)

        f.write("==========================================" + "\n")
        f.write("")
        f.write("[*] PeDetect By Elad Yeshayahou" + "\n")
        # imm.log("=============================================================")
        f.write("[*] Total loaded  signatures : %d" % (
                signatures.signature_count_eponly_true + signatures.signature_count_eponly_false + signatures.signature_count_section_start) + "\n")
        f.write("[*] Total ep_only signatures : %d" % signatures.signature_count_eponly_true + "\n")
        f.write("==========================================" + "\n" * 2)
        f.write("")

        # Signature found or not found !
        if matched:
            f.write("[*] Processing : %s " % name + "\n")
            f.write("[+] Signature Found  : %s " % matched + "\n")
            f.write("" + "\n")
        else:
            f.write("[*] Processing   %s !" % name + "\n")
            f.write("   [-] Signature Not Found !" + "\n" * 2)
            f.write("" + "\n")

        # Checking for arguments !
        if not args:
            usage(imm)

        return "[+] See packers.txt for results...."
