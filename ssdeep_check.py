import os
import time
from multiprocessing import Queue, Process
from threading import Thread
import ppdeep
import concurrent.futures
import itertools
from queue import Queue

# h1 = ppdeep.hash_from_file("nop.exe")
# h2 = ppdeep.hash_from_file("virus.exe")
# print(ppdeep.compare(h1, h2))

counter = 0
scan_counter = 0
changed_counter = False


def process_chunk(hash, chunk):
    global counter, changed_counter, scan_counter
    for line in chunk:
        if line != "":
            print(ppdeep.compare(hash, line))
            scan_counter += 1
            if ppdeep.compare(hash, line) != 0:
                print("got here", ppdeep.compare(hash, line.split(",")[0]))
                counter += 1
                changed_counter = True


def search_49_file(hash):
    global counter
    with concurrent.futures.ThreadPoolExecutor() as executor:
        with open(os.path.abspath("vxshare-clusters-49/vxshare.ssdeep.clusters.49").replace("graphics",
                                                                                            "fuzzy_hashing")) as f:
            chunk_size = 1000
            for lines in iter(lambda: list(itertools.islice(f, chunk_size)), []):
                executor.submit(process_chunk, hash, lines)


def search_79_file(hash):
    global counter
    with concurrent.futures.ThreadPoolExecutor() as executor:
        with open(os.path.abspath("vxshare-clusters-79/vxshare.ssdeep.clusters.79").replace("graphics",
                                                                                            "fuzzy_hashing")) as f:
            chunk_size = 1000
            for lines in iter(lambda: list(itertools.islice(f, chunk_size)), []):
                executor.submit(process_chunk, hash, lines)


def change_fuzzy_label(label):
    while True:
        if label:
            label.setText(f"Scanned {scan_counter} / 47544373 fuzzy hashes")


def num_of_lines():
    # Open the file in read mode
    with open(r"D:\Cyber\YB_CYBER\project\FinalProject\poc_start\poc_start\unrelated\fuzzy_hashing\vxshare-clusters"
              r"-49\vxshare.ssdeep.clusters.49", "r") as f:
        counter_49 = sum(1 for line in f if line.strip())

    # Open the file in read mode
    with open(r"D:\Cyber\YB_CYBER\project\FinalProject\poc_start\poc_start\unrelated\fuzzy_hashing\vxshare-clusters"
              r"-79\vxshare.ssdeep.clusters.79", "r") as f:
        counter_79 = sum(1 for line in f if line.strip())

    return counter_49 + counter_79


def change_spin_counter(spin_box, redis_base, md5_hash):
    while True:
        spin_box.setValue(counter)
        redis_base.hset(md5_hash, "num_of_fuzzy_found", counter)
        # redis_base.print_key(md5_hash, "num_of_fuzzy_found", False)
        time.sleep(5)


if __name__ == '__main__':
    print(num_of_lines())
