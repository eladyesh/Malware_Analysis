from multiprocessing import Queue, Process
from threading import Thread
import ppdeep
import concurrent.futures
import itertools


# h1 = ppdeep.hash_from_file("nop.exe")
# h2 = ppdeep.hash_from_file("virus.exe")
# print(ppdeep.compare(h1, h2))

def process_chunk(hash, chunk):
    for line in chunk:
        print(ppdeep.compare(hash, line))
        if ppdeep.compare(hash, line) != 0:
            print("got here", ppdeep.compare(hash, line.split(",")[0]))


def search_49_file(hash):
    with concurrent.futures.ThreadPoolExecutor() as executor:
        with open("vxshare-clusters-49/vxshare.ssdeep.clusters.49") as f:
            chunk_size = 1000
            for lines in iter(lambda: list(itertools.islice(f, chunk_size)), []):
                executor.submit(process_chunk, hash, lines)


def search_79_file(hash):
    with concurrent.futures.ThreadPoolExecutor() as executor:
        with open("vxshare-clusters-79/vxshare.ssdeep.clusters.79") as f:
            chunk_size = 1000
            for lines in iter(lambda: list(itertools.islice(f, chunk_size)), []):
                executor.submit(process_chunk, hash, lines)


def run_checks(file):
    h1 = ppdeep.hash_from_file(file)

    t1 = Thread(target=search_49_file, args=(h1, ))
    t2 = Thread(target=search_79_file, args=(h1, ))

    t1.start()
    t2.start()

    t1.join()
    t2.join()


if __name__ == '__main__':
    run_checks("real_nop.exe")
