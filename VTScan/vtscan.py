import os
import sys
import time
import json
import requests
import argparse
import hashlib


# for terminal colors
class Colors:
    BLUE = '\033[94m'  # static variables
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    PURPLE = '\033[95m'
    ENDC = '\033[0m'

    # ------ MORE COLORS ------
    # HEADER = '\033[95m'
    # OKBLUE = '\033[94m'
    # OKCYAN = '\033[96m'
    # OKGREEN = '\033[92m'
    # WARNING = '\033[93m'
    # FAIL = '\033[91m'
    # ENDC = '\033[0m'
    # BOLD = '\033[1m'
    # UNDERLINE = '\033[4m'


# Virus Total API key
VT_API_KEY = r"9065bb9783e2196439ab5b9a99519c92674dedf381517bad08d7c3fbb8802987"  # your virus total api key

# VirusTotal API v3 URL
VT_API_URL = r"https://www.virustotal.com/api/v3/"


def make_json(name, data):
    """
    function makes a json file of out data from the vt api
    :param name: the name of the file
    :param data: the json data
    :return: NOne
    """

    with open(name + ".json", "w") as f:
        json.dump(data, f)


class VTScan:

    def __init__(self):

        # a dictionary of HTTP headers to send to the specified url.
        self.headers = {
            "x_apikey": VT_API_KEY,  # api key
            "User-Agent": "vtscan v.1.0",
            "Accept-Encoding": "gzip, deflate"
            # the client can accept a response which has been compressed using the DEFLATE algorithm
        }

    def upload(self, malware_path):
        """
        function uploads suspicious file into malware_path
        :param malware_path: the path of the suspicious file
        :return: None
        """
        print(Colors.BLUE + "upload file: " + malware_path + "..." + Colors.ENDC)
        self.malware_path = malware_path
        upload_url = VT_API_URL + "files"

        # a dictionary of files to send to the specified url
        files = {"file": (os.path.basename(malware_path),
                          open(os.path.abspath(malware_path), "rb"))}  # the requested format for posting
        print(Colors.YELLOW + "upload to " + upload_url + Colors.ENDC)
        res = requests.post(upload_url, headers=self.headers, files=files)

        # if requested post successful and the server responded with the data
        if res.status_code == 200:

            # make json format
            result = res.json()

            # writing to json file
            # make_json("upload", result)

            self.file_id = result.get("data").get("id")
            print(Colors.YELLOW + self.file_id + Colors.ENDC)
            print(Colors.GREEN + "successfully upload PE file: OK" + Colors.ENDC)

        # not ok
        else:
            print(Colors.RED + "failed to upload PE file :(" + Colors.ENDC)
            print(Colors.RED + "status code: " + str(res.status_code) + Colors.ENDC)
            sys.exit(1)

    def analyse(self):
        """
        function analyses the files uploaded from Virus Total
        :return: None
        """

        print(Colors.BLUE + "Getting info about your file...." + Colors.ENDC)
        analysis_url = VT_API_URL + "analyses/" + self.file_id
        res = requests.get(analysis_url, headers=self.headers)
        if res.status_code == 200:
            result = res.json()
            # make_json("analyse", result)
            status = result.get("data").get("attributes").get("status")

            # if analysis was completed
            if str(status) == "completed":
                stats = result.get("data").get("attributes").get("stats")
                results = result.get("data").get("attributes").get("results")
                print(Colors.RED + "malicious: " + str(stats.get("malicious")) + Colors.ENDC)
                print(Colors.YELLOW + "undetected : " + str(stats.get("undetected")) + Colors.ENDC)
                print()
                for r in results:
                    if results[r].get("category") == "malicious":
                        print("==================================================")
                        print(Colors.GREEN + results[r].get("engine_name") + Colors.ENDC)
                        print("version : " + results[r].get("engine_version"))
                        print("category : " + results[r].get("category"))
                        print("result : " + Colors.RED + results[r].get("result") + Colors.ENDC)
                        print("method : " + results[r].get("method"))
                        print("update : " + results[r].get("engine_update"))
                        print("==================================================")
                        print()
                print(Colors.GREEN + "successfully analyse: OK" + Colors.ENDC)
                sys.exit(1)

            # or queued....
            elif status == "queued":
                print(Colors.BLUE + "status QUEUED..." + Colors.ENDC)
                with open(os.path.abspath(self.malware_path), "rb") as f:
                    b = f.read()

                    # creating a sha256 hash of the file
                    hashsum = hashlib.sha256(b).hexdigest()
                    self.info(hashsum)
        else:
            print(Colors.RED + "failed to get results of analysis :(" + Colors.ENDC)
            print(Colors.RED + "status code: " + str(res.status_code) + Colors.ENDC)
            sys.exit(1)

    def run(self, malware_path):
        self.upload(malware_path)
        self.analyse()

    def info(self, file_hash):
        """
        function analyses file by it's has
        :param file_hash: the files hash
        :return: None
        """

        print(Colors.BLUE + "Getting file info by ID: " + file_hash + Colors.ENDC)
        info_url = VT_API_URL + "files/" + file_hash
        res = requests.get(info_url, headers=self.headers)
        if res.status_code == 200:
            result = res.json()
            # make_json("info", result)
            if result.get("data").get("attributes").get("last_analysis_results"):
                stats = result.get("data").get("attributes").get("last_analysis_stats")
                results = result.get("data").get("attributes").get("last_analysis_results")
                print(Colors.RED + "malicious: " + str(stats.get("malicious")) + Colors.ENDC)
                print(Colors.YELLOW + "undetected : " + str(stats.get("undetected")) + Colors.ENDC)
                print()
                for r in results:
                    if results[r].get("category") == "malicious":
                        print("==================================================")
                        print(Colors.GREEN + results[r].get("engine_name") + Colors.ENDC)
                        print("version : " + results[r].get("engine_version"))
                        print("category : " + results[r].get("category"))
                        print("result : " + Colors.RED + results[r].get("result") + Colors.ENDC)
                        print("method : " + results[r].get("method"))
                        print("update : " + results[r].get("engine_update"))
                        print("==================================================")
                        print()
                print(Colors.GREEN + "successfully analyse: OK" + Colors.ENDC)
                sys.exit(1)
            else:
                print(Colors.BLUE + "failed to analyse :(..." + Colors.ENDC)

        else:
            print(Colors.RED + "failed to get information :(" + Colors.ENDC)
            print(Colors.RED + "status code: " + str(res.status_code) + Colors.ENDC)
            sys.exit(1)


if __name__ == "__main__":

    # creating an argument parser
    parser = argparse.ArgumentParser()

    # adding argument
    parser.add_argument('-m', '--mal', required=True, help="PE file path for scanning")
    args = vars(parser.parse_args())

    # running scan on suspicious file
    vtscan = VTScan()
    vtscan.run(args["mal"])
