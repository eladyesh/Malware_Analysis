#include <iostream>
#include <winsock.h>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <thread>
#include <queue>
#include <mutex>
#pragma comment(lib, "ws2_32.lib") //To link the winsock library 

std::queue<int> port_queue;
std::mutex mut;

DWORD port_scanner(int port, char* ip) {

	WSADATA wsa;

	printf("\nInitialising Winsock...");
	if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
	{
		printf("Failed. Error Code : %d", WSAGetLastError());
		return 1;
	}

	printf("Initialised.\n");

	SOCKET s;
	struct sockaddr_in sock;

	//Create a socket
	if ((s = socket(AF_INET, SOCK_STREAM, 0)) == INVALID_SOCKET)
	{
		printf("Could not create socket : %d", WSAGetLastError());
	}

	printf("Socket created.\n");


	sock.sin_addr.s_addr = inet_addr(ip);
	sock.sin_family = AF_INET;
	sock.sin_port = htons(port);

	//Connect to remote server
	int iResult = connect(s, (struct sockaddr*)&sock, sizeof(sock));
	if (iResult == SOCKET_ERROR)
	{
		std::cout << "No success :( in connecting to port " << port << std::endl;
	}
	else {
		std::cout << "Succcess :) Connected to port " << port << std::endl;
	}
	return 0;
}

void run() {

	mut.lock();
	while (!port_queue.empty()) {
		int port = port_queue.front();
		port_scanner(port, (char*)"142.250.186.68");
		port_queue.pop();
	}
	mut.unlock();
}


int main()
{
	for (size_t i = 80; i <= 443; i++)
	{
		port_queue.push(i);
	}
	std::thread t(run);
	std::thread t1(run);
	std::thread t2(run);
	t.join();
	t1.join();
	t2.join();
	return 0;
}
