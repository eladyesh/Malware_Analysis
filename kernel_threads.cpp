#include <windows.h>
#include <tlhelp32.h>
#include <iostream>
#include <string>

int main() {
    std::string processName;
    std::cout << "Enter process name: ";
    std::getline(std::cin, processName);

    // Create a snapshot of all running processes
    HANDLE processSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);

    if (processSnapshot != INVALID_HANDLE_VALUE) {
        PROCESSENTRY32 processEntry = { sizeof(PROCESSENTRY32) };

        // Iterate through all processes and find the one with the specified name
        if (Process32First(processSnapshot, &processEntry)) {
            do {
                if (_stricmp(processEntry.szExeFile, processName.c_str()) == 0) {
                    std::cout << "Process " << processName << " found." << std::endl;

                    // Get a handle to the process
                    HANDLE processHandle = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processEntry.th32ProcessID);

                    if (processHandle != NULL) {
                        // Enumerate all threads associated with the process
                        DWORD threadCount = 0;
                        THREADENTRY32 threadEntry = { sizeof(THREADENTRY32) };

                        HANDLE threadSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);

                        if (threadSnapshot != INVALID_HANDLE_VALUE) {
                            if (Thread32First(threadSnapshot, &threadEntry)) {
                                do {
                                    if (threadEntry.th32OwnerProcessID == processEntry.th32ProcessID) {
                                        HANDLE threadHandle = OpenThread(THREAD_QUERY_INFORMATION, FALSE, threadEntry.th32ThreadID);

                                        if (threadHandle != NULL) {
                                            DWORD threadPriority = GetThreadPriority(threadHandle);

                                            if (threadPriority == THREAD_PRIORITY_TIME_CRITICAL ||
                                                threadPriority == THREAD_PRIORITY_HIGHEST ||
                                                threadPriority == THREAD_PRIORITY_ABOVE_NORMAL) {
                                                // Thread is a kernel thread
                                                threadCount++;
                                            }

                                            CloseHandle(threadHandle);
                                        }
                                    }
                                } while (Thread32Next(threadSnapshot, &threadEntry));
                            }

                            CloseHandle(threadSnapshot);
                        }

                        std::cout << "Process " << processName << " has " << threadCount << " kernel threads." << std::endl;

                        CloseHandle(processHandle);
                    }
                    else {
                        std::cout << "Failed to open process." << std::endl;
                    }

                    break;
                }
            } while (Process32Next(processSnapshot, &processEntry));
        }

        CloseHandle(processSnapshot);
    }

    return 0;
}
